@inject NavigationManager NavigationManager

@if (ChildContent is not null)
{
    <div @attributes="InputAttributes" 
            class="@ActiveCss @IndividualClass"
            @onclick="OnClick"
            @onmouseover="Activate"
            @onmouseout="DeActivate">
        @ChildContent
    </div>
}

@code {
    protected string ActiveCss = "";

    protected object? IndividualClass
    {
        get
        {
            var invividualClass = InputAttributes.ContainsKey("class")
                ? InputAttributes["class"]
                : null;
            return invividualClass;
        }
    }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; } = new Dictionary<string, object>();

    protected virtual void OnClick(){
        NavigateIfLinkPassed();
    }

    protected void NavigateIfLinkPassed()
    {
        if (InputAttributes.ContainsKey("href"))
        {
            NavigationManager.NavigateTo((string)InputAttributes["href"], true);
        }
    }

    protected void Activate(){
        ActiveCss = "active";
    }

    protected void DeActivate(){
        ActiveCss = "";
    }
}

